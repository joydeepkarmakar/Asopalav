@model Asopalav.Models.ProductModel
<p style="margin-left:20px;">
    <a href="@Url.Action("ProductList","Product")">
        <span class="glyphicon glyphicon-backward"></span> Back to List
    </a>
</p>

@using (Html.BeginForm("Add", "Product", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal admin-margin-top-pro">
        <h4 style="text-align:center;font-weight:bold;font-size:20px">Product Model</h4>
        <hr />

        @Html.HiddenFor(m => m.ProductID)
        <div class="row" id="input-width">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.ProductCode, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.ProductCode, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.ProductCode, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ProductName, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ProductName, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ProductTypeID, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8 pro-ad">
                        @Html.DropDownListFor(m => m.ProductTypeID, (SelectList)ViewBag.ProductTypeList, "Choose...", new { @class = "form-control gender-width" })
                        @Html.ValidationMessageFor(model => model.ProductTypeID, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.WeightInGms, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.WeightInGms, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.WeightInGms, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HeightInInch, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-5 size">
                                @Html.TextBoxFor(m => m.HeightInInch, new { @class = "form-control", @style = "50%" })
                            </div>
                            <div class="col-sm-2" style="padding: 5px 0 0 30px;">
                                X
                            </div>
                            <div class="col-sm-5 size">
                                @Html.TextBoxFor(m => m.WidthInInch, new { @class = "form-control", @style = "50%" })
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.HeightInInch, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Price, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.Price, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Price, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-offset-4 col-sm-8">
                        <div class="checkbox chb-prod">
                            @Html.LabelFor(m => m.IsOffer)
                            @Html.CheckBoxFor(m => m.IsOffer, new { @style = "margin-top:5px !important;" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OfferPrice, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.OfferPrice, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    <div class="col-sm-offset-4 col-sm-8">
                        <div class="checkbox chb-prod">
                            @Html.LabelFor(m => m.IsActive)
                            @Html.CheckBoxFor(m => m.IsActive, new { @style = "margin-top:5px !important;" })
                            @Html.ValidationMessageFor(m => m.IsActive, "", new { @style = "color:red" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Description, new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control rounded-0" })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @style = "color:red" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Description, new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @*@if (Model.ImagePathList.Count > 0)
                        {
                            for (int i = 0; i > Model.ImagePathList.Count - 1; i++)
                            {
                                @Html.HiddenFor(m => m.ImagePathList[i])
                            }
                        }
                        @Html.HiddenFor(m => m.ImagePathList[0])*@

                        <div id="divDropImages" class="fallback dropzone dropDiv">
                            Upload
                            <a href="javascript:void(0);">
                                <span class="drophyperspan" style="cursor: pointer; height: 300px; overflow-y: auto; overflow-x: hidden;padding-left:13px">
                                </span>
                            </a>
                        </div>
                        @Html.ValidationMessageFor(m => m.ImagePath, "", new { @style = "color:red" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group pro-admin-topspace">
            <button type="submit" class="btn btn-primary butt-color col-xs-offset-0 col-sm-offset-3 col-md-offset-4 col-xs-12 col-sm-6 col-md-4">Save</button>
        </div>
    </div>
}

@section Scripts {
    <script type="text/javascript">
        if ('@TempData["isProductSaved"]' == "true") {
            toastr.success('@TempData["ProductSaveMsg"]');
        }
        else if ('@TempData["isProductSaved"]' == "false") {
            toastr.error('@TempData["ProductSaveMsg"]');
        }


        @*Dropzone.autoDiscover = false;
        $("div#divDropImages span.drophyperspan").dropzone({
            acceptedFiles: "image/*",
            init: function () {
                var thisDropzone = this;

                $.getJSON("@Url.Action("GetImageList", "Product")").done(function (data) {
                    if (data.Data != '') {

                        $.each(data.Data, function (index, item) {
                            //// Create the mock file:
                            var mockFile = {
                                name: item.ImageName,
                                size: 12345
                            };

                            // Call the default addedfile event handler
                            thisDropzone.emit("addedfile", mockFile);

                            // And optionally show the thumbnail of the file:
                            thisDropzone.emit("thumbnail", mockFile, item.ImagePath);

                            // If you use the maxFiles option, make sure you adjust it to the
                            // correct amount:
                            //var existingFileCount = 1; // The number of files already uploaded
                            //myDropzone.options.maxFiles = myDropzone.options.maxFiles - existingFileCount;
                        });
                    }

                });
            }
        });*@
    </script>
}
